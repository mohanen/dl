---
import { ViewTransitions } from 'astro:transitions';
import ThemeToggle from '../components/ThemeToggle.svelte';
interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
const BASE = import.meta.env.BASE_URL && import.meta.env.BASE_URL.endsWith('/')
	? import.meta.env.BASE_URL
	: `${import.meta.env.BASE_URL || ''}/`;
---

<!doctype html>
<html lang="en">
	<head>
		<ViewTransitions />
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" sizes="any" href={`${BASE}favicon.svg?v=2`} />
		<link rel="shortcut icon" type="image/svg+xml" sizes="any" href={`${BASE}favicon.svg?v=2`} />
		<link rel="apple-touch-icon" href={`${BASE}favicon.svg?v=2`} />
		<link rel="mask-icon" href={`${BASE}favicon.svg?v=2`} color="#FDE725" />
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
    	<script is:inline>
			// Respect saved preference or system, then apply class for Tailwind dark mode
			const saved = typeof localStorage !== 'undefined' ? localStorage.getItem('theme') : null;
			const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
			const theme = saved || (prefersDark ? 'dark' : 'light');
			if (theme === 'dark') document.documentElement.classList.add('dark');
			else document.documentElement.classList.remove('dark');
		</script>
		<script is:inline>document.documentElement.classList.add('is-loading');</script>
		<style is:inline>
			.preloader{position:fixed;inset:0;display:grid;place-items:center;z-index:9999;opacity:1;transition:opacity .3s ease;pointer-events:all}
			.preloader.hidden{opacity:0;pointer-events:none}
			.light .preloader{background:radial-gradient(1200px 600px at 50% 20%,rgba(0,0,0,.05),transparent 60%),#ffffff}
			.dark .preloader{background:radial-gradient(1200px 600px at 50% 20%,rgba(253,231,76,.06),transparent 60%),#0b0b0c}
			.preloader-content{display:flex;flex-direction:column;align-items:center;gap:1rem}
			.preloader-icon{width:64px;height:64px;animation:float 2s ease-in-out infinite;filter:drop-shadow(0 0 1.25rem rgba(253,231,76,.35))}
			.preloader-spinner{width:28px;height:28px;border-radius:9999px;border:3px solid rgba(127,127,127,.25);border-top-color:#fdd725;animation:spin 1s linear infinite}
			@keyframes spin{to{transform:rotate(360deg)}}
			@keyframes float{0%,100%{transform:translateY(0)}50%{transform:translateY(-6px)}}
			@media (prefers-reduced-motion: reduce){.preloader-icon{animation:none}.preloader-spinner{animation:none}}
			html.is-loading{overflow:hidden}
		</style>
	</head>
    <body class="min-h-screen antialiased">
    <div id="preloader" class="preloader" aria-hidden="true">
      <div class="preloader-content">
        <img src={`${BASE}favicon.svg`} alt="" aria-hidden="true" class="preloader-icon" />
        <div class="preloader-spinner" aria-label="Loading" role="status"></div>
      </div>
    </div>
    <div id="progress" class="progress-bar"></div>
    <header class="sticky top-0 z-50 w-full text-lg border-b border-gray-200/60 dark:border-neutral-800/60 bg-white/90 dark:bg-neutral-950/80 backdrop-blur supports-[backdrop-filter]:bg-white/50 dark:supports-[backdrop-filter]:bg-neutral-950/30">
      <div class="container h-14 flex items-center justify-between">
        <a href={`${BASE}`} class="flex items-center gap-4 font-semibold no-underline text-gray-900 dark:text-gray-100 hover:text-gray-800 dark:hover:text-gray-200">
          <img src={`${BASE}favicon.svg`} alt="DL Cheatsheet" class="h-14 w-14" />
          <span>The Deep Learning Cheatsheet</span>
        </a>
        <ThemeToggle client:load />
      </div>
    </header>
		<main class="container py-6">
			<slot />
		</main>
    <footer class="container py-8 text-sm text-gray-500 dark:text-gray-400 text-center">
      Built with <a href="https://astro.build/" target="_blank" class="underline hover:text-foreground">Astro</a> and <a href="https://svelte.dev/" target="_blank" class="underline hover:text-foreground">Svelte</a>.
      MIT License.
    </footer>
    <script is:inline>
      // Loading overlay control
      function showPreloader(){
        const el = document.getElementById('preloader');
        if(!el) return;
        el.classList.remove('hidden');
        document.documentElement.classList.add('is-loading');
        try{document.body.setAttribute('inert','');}catch(e){}
      }
      function hidePreloader(){
        const el = document.getElementById('preloader');
        if(!el) return;
        const done = () => { try{ el.parentNode && el.parentNode.removeChild(el); }catch(e){} };
        el.classList.add('hidden');
        document.documentElement.classList.remove('is-loading');
        try{document.body.removeAttribute('inert');}catch(e){}
        el.addEventListener('transitionend', done, { once: true });
        window.setTimeout(done, 600);
      }
      // Hide early on DOM ready or Astro ready; don't wait for all lazy images
      const hideSoon = () => { setTimeout(hidePreloader, 50); };
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        hideSoon();
      } else {
        document.addEventListener('DOMContentLoaded', hideSoon, { once: true });
      }
      document.addEventListener('astro:page-load', hideSoon, { once: true });
      // Fallback safety timeout in case events don't fire
      setTimeout(() => { try { hidePreloader(); } catch(_){} }, 2500);
      // Optional: show during SPA navigations for consistency
      document.addEventListener('astro:before-preparation', () => { showPreloader(); });
      function addCopyButtons() {
        document.querySelectorAll('pre').forEach(pre => {
          const code = pre.querySelector('code');
          if (!code) return;

          const button = document.createElement('button');
          button.className = 'copy-button';
          button.textContent = 'Copy';
          
          let timeout;
          button.addEventListener('click', () => {
            navigator.clipboard.writeText(code.innerText);
            button.textContent = 'Copied!';
            
            clearTimeout(timeout);
            timeout = setTimeout(() => {
              button.textContent = 'Copy';
            }, 2000);
          });
          
          pre.style.position = 'relative';
          pre.appendChild(button);
        });
      }
      addCopyButtons();
      document.addEventListener('astro:after-swap', addCopyButtons);

      // Reading progress
      const progress = document.getElementById('progress');
      function updateProgress() {
        const scrollTop = window.scrollY;
        const height = document.body.scrollHeight - window.innerHeight;
        const pct = Math.max(0, Math.min(1, height ? scrollTop / height : 0));
        if (progress) progress.style.width = `${pct * 100}%`;
      }
      updateProgress();
      window.addEventListener('scroll', updateProgress, { passive: true });
      document.addEventListener('astro:after-swap', () => {
        updateProgress();
      });
    </script>
	</body>
</html>
<style is:global>
	@import '../styles/global.css';

  .copy-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    background-color: hsl(var(--muted) / 0.8);
    border: 1px solid hsl(var(--border));
    color: hsl(var(--muted-foreground));
    border-radius: 0.375rem;
    font-size: 0.75rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity 0.2s;
  }

  pre:hover .copy-button {
    opacity: 1;
  }

 
</style>


