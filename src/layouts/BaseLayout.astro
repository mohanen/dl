---
import { ViewTransitions } from 'astro:transitions';
import ThemeToggle from '../components/ThemeToggle.svelte';
interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
const BASE = import.meta.env.BASE_URL && import.meta.env.BASE_URL.endsWith('/')
	? import.meta.env.BASE_URL
	: `${import.meta.env.BASE_URL || ''}/`;
---

<!doctype html>
<html lang="en">
	<head>
		<ViewTransitions />
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" sizes="any" href={`${BASE}favicon.svg?v=2`} />
		<link rel="shortcut icon" type="image/svg+xml" sizes="any" href={`${BASE}favicon.svg?v=2`} />
		<link rel="apple-touch-icon" href={`${BASE}favicon.svg?v=2`} />
		<link rel="mask-icon" href={`${BASE}favicon.svg?v=2`} color="#FDE725" />
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.22/dist/katex.min.css" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
    	<script is:inline>
			// Respect saved preference or system, then apply class for Tailwind dark mode
			const saved = typeof localStorage !== 'undefined' ? localStorage.getItem('theme') : null;
			const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
			const theme = saved || (prefersDark ? 'dark' : 'light');
			if (theme === 'dark') document.documentElement.classList.add('dark');
			else document.documentElement.classList.remove('dark');
		</script>
		<script is:inline>document.documentElement.classList.add('is-loading');</script>
		<style is:inline>
			.preloader{position:fixed;inset:0;display:grid;place-items:center;z-index:9999;opacity:1;transition:opacity .3s ease;pointer-events:all}
			.preloader.hidden{opacity:0;pointer-events:none}
			.light .preloader{background:radial-gradient(1200px 600px at 50% 20%,rgba(0,0,0,.05),transparent 60%),#ffffff}
			.dark .preloader{background:radial-gradient(1200px 600px at 50% 20%,rgba(253,231,76,.06),transparent 60%),#0b0b0c}
			.preloader-content{display:flex;flex-direction:column;align-items:center;gap:1rem}
			.preloader-icon{width:64px;height:64px;animation:float 2s ease-in-out infinite;filter:drop-shadow(0 0 1.25rem rgba(253,231,76,.35))}
			.preloader-spinner{width:28px;height:28px;border-radius:9999px;border:3px solid rgba(127,127,127,.25);border-top-color:#fdd725;animation:spin 1s linear infinite}
			@keyframes spin{to{transform:rotate(360deg)}}
			@keyframes float{0%,100%{transform:translateY(0)}50%{transform:translateY(-6px)}}
			@media (prefers-reduced-motion: reduce){.preloader-icon{animation:none}.preloader-spinner{animation:none}}
			html.is-loading{overflow:hidden}
		</style>
	</head>
    <body class="min-h-screen antialiased">
    <div id="preloader" class="preloader" aria-hidden="true">
      <div class="preloader-content">
        <img src={`${BASE}favicon.svg`} alt="" aria-hidden="true" class="preloader-icon" />
        <div class="preloader-spinner" aria-label="Loading" role="status"></div>
      </div>
    </div>
    <div id="progress" class="progress-bar"></div>

    <!-- Scroll to top button -->
    <button
      id="scroll-to-top"
      class="fixed bottom-8 right-8 z-50 w-12 h-12 rounded-full bg-white/90 dark:bg-neutral-900/90 backdrop-blur-sm border border-gray-200/60 dark:border-neutral-700/60 shadow-lg hover:shadow-xl hover:bg-white dark:hover:bg-neutral-900 transition-all duration-300 opacity-0 translate-y-4 pointer-events-none group"
      aria-label="Scroll to top"
    >
      <svg class="w-5 h-5 mx-auto text-gray-600 dark:text-gray-400 group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>
    <header class="sticky top-0 z-50 w-full text-lg border-b border-gray-200/60 dark:border-neutral-800/60 bg-white/95 dark:bg-neutral-950/85 backdrop-blur supports-[backdrop-filter]:bg-white/70 dark:supports-[backdrop-filter]:bg-neutral-950/50">
      <!-- Progress indicator overlay -->
      <div class="absolute top-0 left-0 h-1 bg-gradient-to-r from-teal-500 via-blue-500 to-yellow-500 transition-all duration-200" id="nav-progress"></div>

      <div class="container h-16 flex items-center justify-between relative">
        <div class="flex items-center gap-4">
          <a href={`${BASE}`} class="flex items-center gap-3 font-bold no-underline text-gray-900 dark:text-gray-100 hover:text-teal-600 dark:hover:text-teal-400 transition-colors duration-200 group">
            <div class="relative">
              <img src={`${BASE}favicon.svg`} alt="DL Cheatsheet" class="h-10 w-10 group-hover:scale-110 transition-transform duration-200" />
              <div class="absolute inset-0 bg-gradient-to-r from-teal-400/20 to-blue-400/20 rounded-full blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200"></div>
            </div>
            <div>
              <span class="text-lg">Deep Learning</span>
              <span class="block text-xs font-medium text-gray-500 dark:text-gray-400">Cheatsheet</span>
            </div>
          </a>
        </div>

        <div class="flex items-center gap-4">
          <!-- Navigation utilities -->
          <div class="hidden md:flex items-center gap-2">
            <button
              id="scroll-to-top-nav"
              class="flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 rounded-lg hover:bg-gray-100/80 dark:hover:bg-neutral-800/80"
              aria-label="Scroll to top"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
              </svg>
              <span>Top</span>
            </button>

            <div class="h-4 w-px bg-gray-200 dark:bg-neutral-700"></div>

            <a
              href="#"
              class="flex items-center gap-2 px-3 py-1.5 text-sm text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400 transition-colors duration-200 rounded-lg hover:bg-gray-100/80 dark:hover:bg-neutral-800/80"
              onclick="document.getElementById('progress').scrollIntoView({behavior: 'smooth'}); return false;"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              <span>Progress</span>
            </a>
          </div>

          <ThemeToggle client:load />
        </div>
      </div>
    </header>
		<main class="container py-12">
			<slot />
		</main>
    <footer class="container py-8 text-sm text-gray-500 dark:text-gray-400 text-center">
      Built with <a href="https://astro.build/" target="_blank" class="underline hover:text-foreground">Astro</a> and <a href="https://svelte.dev/" target="_blank" class="underline hover:text-foreground">Svelte</a>.
      MIT License.
    </footer>
    <script is:inline>
      // Loading overlay control
      function showPreloader(){
        const el = document.getElementById('preloader');
        if(!el) return;
        el.classList.remove('hidden');
        document.documentElement.classList.add('is-loading');
        try{document.body.setAttribute('inert','');}catch(e){}
      }
      function hidePreloader(){
        const el = document.getElementById('preloader');
        if(!el) return;
        const done = () => { try{ el.parentNode && el.parentNode.removeChild(el); }catch(e){} };
        el.classList.add('hidden');
        document.documentElement.classList.remove('is-loading');
        try{document.body.removeAttribute('inert');}catch(e){}
        el.addEventListener('transitionend', done, { once: true });
        window.setTimeout(done, 600);
      }
      // Hide early on DOM ready or Astro ready; don't wait for all lazy images
      const hideSoon = () => { setTimeout(hidePreloader, 50); };
      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        hideSoon();
      } else {
        document.addEventListener('DOMContentLoaded', hideSoon, { once: true });
      }
      document.addEventListener('astro:page-load', hideSoon, { once: true });
      // Fallback safety timeout in case events don't fire
      setTimeout(() => { try { hidePreloader(); } catch(_){} }, 2500);
      // Optional: show during SPA navigations for consistency
      document.addEventListener('astro:before-preparation', () => { showPreloader(); });
      function addCopyButtons() {
        document.querySelectorAll('pre').forEach(pre => {
          const code = pre.querySelector('code');
          if (!code) return;

          const button = document.createElement('button');
          button.className = 'copy-button';
          button.textContent = 'Copy';
          
          let timeout;
          button.addEventListener('click', () => {
            navigator.clipboard.writeText(code.innerText);
            button.textContent = 'Copied!';
            
            clearTimeout(timeout);
            timeout = setTimeout(() => {
              button.textContent = 'Copy';
            }, 2000);
          });
          
          pre.style.position = 'relative';
          pre.appendChild(button);
        });
      }
      addCopyButtons();
      document.addEventListener('astro:after-swap', addCopyButtons);

      // Reading progress
      const progress = document.getElementById('progress');
      const navProgress = document.getElementById('nav-progress');
      function updateProgress() {
        const scrollTop = window.scrollY;
        const height = document.body.scrollHeight - window.innerHeight;
        const pct = Math.max(0, Math.min(1, height ? scrollTop / height : 0));
        if (progress) progress.style.width = `${pct * 100}%`;
        if (navProgress) navProgress.style.width = `${pct * 100}%`;
      }
      updateProgress();
      window.addEventListener('scroll', updateProgress, { passive: true });
      document.addEventListener('astro:after-swap', () => {
        updateProgress();
      });

      // Scroll to top functionality
      const scrollToTopBtn = document.getElementById('scroll-to-top');
      const scrollToTopNavBtn = document.getElementById('scroll-to-top-nav');

      function toggleScrollToTop() {
        const scrollTop = window.scrollY;
        if (scrollTop > 300) {
          scrollToTopBtn?.classList.remove('opacity-0', 'translate-y-4', 'pointer-events-none');
          scrollToTopBtn?.classList.add('opacity-100', 'translate-y-0');
        } else {
          scrollToTopBtn?.classList.add('opacity-0', 'translate-y-4', 'pointer-events-none');
          scrollToTopBtn?.classList.remove('opacity-100', 'translate-y-0');
        }
      }

      function scrollToTop() {
        window.scrollTo({
          top: 0,
          behavior: 'smooth'
        });
      }

      if (scrollToTopBtn) {
        scrollToTopBtn.addEventListener('click', scrollToTop);
        window.addEventListener('scroll', toggleScrollToTop, { passive: true });
        toggleScrollToTop(); // Initial check
      }

      if (scrollToTopNavBtn) {
        scrollToTopNavBtn.addEventListener('click', scrollToTop);
      }
    </script>
	</body>
</html>
<style is:global>
	@import '../styles/global.css';

  .copy-button {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    padding: 0.25rem 0.5rem;
    background-color: hsl(var(--muted) / 0.8);
    border: 1px solid hsl(var(--border));
    color: hsl(var(--muted-foreground));
    border-radius: 0.375rem;
    font-size: 0.75rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity 0.2s;
  }

  pre:hover .copy-button {
    opacity: 1;
  }

 
</style>


