---
import BaseLayout from '../layouts/BaseLayout.astro';
import CollapsibleCategory from '../components/CollapsibleCategory.svelte';
import SearchFilter from '../components/SearchFilter.svelte';
import { getCollection } from 'astro:content';

type Topic = { title: string; image?: string; desc: string[]; parameters: string[]; q?: string };
const files = await getCollection('concepts');

function extractMultiTopics(entry: any): Topic[] {
  // Parse a single markdown file body into multiple card topics.
  const body = entry.body || '';
  const lines = body.split(/\r?\n/);
  const topics: Topic[] = [];
  let current: Topic | null = null;
  const base = import.meta.env.BASE_URL;
  const pushCurrent = () => {
    if (!current) return;
    // Normalize and ensure arrays
    current.desc = current.desc || [];
    current.parameters = current.parameters ? normalizeParameterBullets(current.parameters) : [];
    // Precompute search haystack for faster filtering on the client
    current.q = `${current.title} ${current.desc.join(' ')} ${current.parameters.join(' ')}`.toLowerCase();
    topics.push(current);
  };

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    // ## Heading -> Title start
    const h2 = line.match(/^##\s+(.+)$/);
    if (h2) {
      pushCurrent();
      current = { title: h2[1].trim(), desc: [], parameters: [] };
      continue;
    }
    if (!current) continue;
    // Image: first image after title becomes card image
    const mdImg = line.match(/^!\[[^\]]*\]\(([^)]+)\)/);
    const htmlImg = line.match(/<img[^>]*src=["']([^"']+)["'][^>]*>/);
    if (current && !current.image && (mdImg || htmlImg)) {
      current.image = (mdImg ? mdImg[1] : htmlImg![1]).trim();
      continue;
    }
    // ### Desc or ### Parameters sections
    const h3 = line.match(/^###\s+(Desc|Description|Parameters)\s*$/i);
    if (h3) {
      const section = h3[1].toLowerCase().startsWith('param') ? 'parameters' : 'desc';
      // collect bullet lines until next heading
      const collected = [];
      let j = i + 1;
      for (; j < lines.length; j++) {
        const l = lines[j];
        if (/^###\s+/.test(l) || /^##\s+/.test(l)) break;
        const bullet = l.match(/^\s*[-*]\s+(.*)$/);
        if (bullet) collected.push(bullet[1].trim());
      }
      current[section] = collected;
      i = j - 1; // advance
      continue;
    }
  }
  pushCurrent();
  return topics;
}

function normalizeParameterBullets(bullets: string[]): string[] {
  const results: string[] = [];
  for (const raw of bullets) {
    const text = raw.trim();
    if (!text) continue;
    const idx = text.indexOf(':');
    if (idx !== -1) {
      const namesPart = text.slice(0, idx).trim();
      const descPart = text.slice(idx + 1).trim();
      const names = namesPart.split('/').map((n) => n.trim()).filter(Boolean);
      for (const name of names) {
        results.push(`<span class=\"param-name\">${escapeHtml(name)}</span>: ${escapeHtml(descPart)}`);
      }
    } else {
      const names = text.split('/').map((n) => n.trim()).filter(Boolean);
      if (names.length > 1) {
        for (const name of names) results.push(`<span class=\"param-name\">${escapeHtml(name)}</span>`);
      } else {
        results.push(`<span class=\"param-name\">${escapeHtml(text)}</span>`);
      }
    }
  }
  return results;
}

function escapeHtml(s: string): string {
  return s
    .replaceAll('&', '&amp;')
    .replaceAll('<', '&lt;')
    .replaceAll('>', '&gt;');
}

// Build categories -> topics[] map
const categoriesMap = new Map();
for (const entry of files) {
  const cat = entry.data.category || 'General';
  const topics = extractMultiTopics(entry);
  if (!categoriesMap.has(cat)) categoriesMap.set(cat, []);
  categoriesMap.get(cat).push(...topics);
}
const categories = Array.from(categoriesMap.keys()).sort();
---

<BaseLayout title="DL Cheatsheet" description="Deep Learning concepts, parameters, and examples">
  <!-- <section class="space-y-4">
    <div class="text-center py-10 relative overflow-hidden rounded-lg bg-gradient-to-br from-primary/10 via-background to-secondary/20">
       <div 
        class="absolute inset-0 z-0 opacity-10"
        style="background-image: radial-gradient(circle at 40% 60%, hsl(var(--primary)/.1), transparent 40%), radial-gradient(circle at 70% 30%, hsl(var(--accent)/.1), transparent 40%); animation: pulse 8s cubic-bezier(0.4, 0, 0.6, 1) infinite;"
      ></div>
      <img src={`${import.meta.env.BASE_URL}/favicon.svg`} alt="DL Cheatsheet" class="h-32 w-32 mx-auto center" />
      <h1 class="text-4xl font-bold tracking-tight text-primary z-10 relative mx-auto center">Deep Learning Cheatsheet</h1>
      <p class="text-muted-foreground mt-2 z-10 relative mx-auto center">An illustrated, interactive guide to core concepts.</p>
    </div> -->

    <SearchFilter client:load categories={categories} />

    {categories.map((cat) => (
      <CollapsibleCategory
        client:load
        category={cat}
        topics={categoriesMap.get(cat)}
      />
    ))}
  </section>
</BaseLayout>

<style>
  @keyframes pulse {
    0%, 100% {
      opacity: 0.1;
      transform: scale(1);
    }
    50% {
      opacity: 0.2;
      transform: scale(1.1);
    }
  }
</style>


